{"version":3,"sources":["components/HeaderInfo.js","components/InfoPanel.js","components/FooterInfo.js","App.js","serviceWorker.js","index.js"],"names":["HeaderInfo","className","Component","InfoPanel","state","Country","undefined","TotalConfirmed","TotalDeaths","TotalRecovered","NewConfirmed","NewDeaths","NewRecovered","Date","fetch","then","result","json","data","setState","Countries","Card","Header","as","Body","Title","Text","this","FooterInfo","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2TAGqBA,G,6KAEb,OACI,yBAAKC,UAAU,UACX,oN,GAJwBC,c,gBCCnBC,E,4MACjBC,MAAQ,CACJC,aAASC,EACTC,oBAAgBD,EAChBE,iBAAaF,EACbG,oBAAgBH,EAChBI,kBAAcJ,EACdK,eAAWL,EACXM,kBAAaN,EACbO,UAAMP,G,kEAEY,IAAD,OACjBQ,MAAM,sCACLC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZd,QAASa,EAAKE,UAAU,KAAKf,QAC7BE,eAAgBW,EAAKE,UAAU,KAAKb,eACpCC,YAAcU,EAAKE,UAAU,KAAKZ,YAClCC,eAAgBS,EAAKE,UAAU,KAAKX,eACpCC,aAAcQ,EAAKE,UAAU,KAAKV,aAClCC,UAAYO,EAAKE,UAAU,KAAKT,UAChCC,aAAcM,EAAKE,UAAU,KAAKR,aAClCC,KAAMK,EAAKE,UAAU,KAAKP,Y,+BAK9B,OACA,kBAACQ,EAAA,EAAD,KACA,kBAACA,EAAA,EAAKC,OAAN,CAAaC,GAAG,MAAhB,4BACA,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,CAAYF,GAAG,MAAf,qFACA,kBAACF,EAAA,EAAKK,KAAN,CAAWH,GAAG,MAAd,sDACgBI,KAAKvB,MAAMG,gBAE3B,kBAACc,EAAA,EAAKK,KAAN,CAAWH,GAAG,MAAd,gDACgBI,KAAKvB,MAAMI,aAE3B,kBAACa,EAAA,EAAKK,KAAN,CAAWH,GAAG,MAAd,8EACqBI,KAAKvB,MAAMK,gBAEhC,kBAACY,EAAA,EAAKI,MAAN,CAAYF,GAAG,MAAf,0FACE,kBAACF,EAAA,EAAKK,KAAN,CAAWH,GAAG,MAAd,sDACgBI,KAAKvB,MAAMM,cAEzB,kBAACW,EAAA,EAAKK,KAAN,CAAWH,GAAG,MAAd,gDACaI,KAAKvB,MAAMO,WAEtB,kBAACU,EAAA,EAAKK,KAAN,CAAWH,GAAG,MAAd,8EACgBI,KAAKvB,MAAMQ,cAE7B,kBAACS,EAAA,EAAKI,MAAN,mFAA4BE,KAAKvB,MAAMS,KAAvC,W,GApDyBX,aCDlB0B,G,6KAEb,OACI,yBAAK3B,UAAU,UACX,8DAAU,uBAAG4B,KAAK,kCAAR,mF,GAJc3B,cCYzB4B,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.70247b35.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './HeaderInfo.scss';\r\n\r\nexport default class HeaderInfo extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Header\">\r\n                <h1>Ситуація по зараженим COVID-19 в Україні</h1>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './InfoPanel.scss'\r\nimport { Card } from 'react-bootstrap';\r\n\r\nexport default class InfoPanel extends Component {\r\n    state = {\r\n        Country: undefined,\r\n        TotalConfirmed: undefined,\r\n        TotalDeaths: undefined,\r\n        TotalRecovered: undefined,\r\n        NewConfirmed: undefined,\r\n        NewDeaths: undefined,\r\n        NewRecovered:undefined,\r\n        Date: undefined\r\n      }\r\n      componentDidMount(){\r\n        fetch(\"https://api.covid19api.com/summary\")\r\n        .then(result => result.json())\r\n        .then(data => {   \r\n          this.setState({\r\n            Country: data.Countries[174].Country,\r\n            TotalConfirmed: data.Countries[174].TotalConfirmed,\r\n            TotalDeaths:  data.Countries[174].TotalDeaths,\r\n            TotalRecovered: data.Countries[174].TotalRecovered,\r\n            NewConfirmed: data.Countries[174].NewConfirmed,\r\n            NewDeaths:  data.Countries[174].NewDeaths,\r\n            NewRecovered: data.Countries[174].NewRecovered,\r\n            Date: data.Countries[174].Date\r\n          });\r\n        })\r\n      } \r\n    render() {\r\n        return (\r\n        <Card>\r\n        <Card.Header as=\"h2\">Дані</Card.Header>\r\n        <Card.Body>\r\n          <Card.Title as=\"h4\">Дані за весь час</Card.Title>\r\n          <Card.Text as=\"h6\">\r\n              Заражені:  {this.state.TotalConfirmed}\r\n            </Card.Text>\r\n          <Card.Text as=\"h6\">\r\n               Померли:  {this.state.TotalDeaths}\r\n              </Card.Text>\r\n          <Card.Text as=\"h6\">\r\n               Вилікувалися:  {this.state.TotalRecovered}  \r\n            </Card.Text>       \r\n          <Card.Title as=\"h4\">Дані за сьогодні</Card.Title>\r\n            <Card.Text as=\"h6\">\r\n                Заражені:  {this.state.NewConfirmed}\r\n              </Card.Text>\r\n              <Card.Text as=\"h6\">\r\n                Померли:  {this.state.NewDeaths}\r\n              </Card.Text>\r\n                <Card.Text as=\"h6\">\r\n                Вилікувалися:  {this.state.NewRecovered}\r\n              </Card.Text>\r\n              <Card.Title>Дані оновлено: {this.state.Date} </Card.Title>\r\n        </Card.Body>\r\n      </Card>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './FooterInfo.scss'\r\n\r\nexport default class FooterInfo extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Footer\">\r\n                <p>Автор: <a href=\"https://github.com/IgorMatviuk\">Игорь Матвиюк</a></p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport HeaderInfo from './components/HeaderInfo';\nimport InfoPanel from './components/InfoPanel';\nimport FooterInfo from './components/FooterInfo';\n\nfunction App() {\n  return (\n    <div>\n      <HeaderInfo></HeaderInfo>\n      <InfoPanel></InfoPanel>\n      <FooterInfo></FooterInfo>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}